"""adding permission and last modified

Revision ID: 8fdc843fc202
Revises: 6e7f580ff680
Create Date: 2022-10-17 14:11:33.017738

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection
from sqlalchemy.dialects import postgresql
import logging

# revision identifiers, used by Alembic.
revision = "8fdc843fc202"
down_revision = "6e7f580ff680"
branch_labels = None
depends_on = None


def get_tables(connection):
    inspector = reflection.Inspector.from_engine(connection)
    return inspector.get_table_names()


def _table_has_column(connection, table, column):
    insp = reflection.Inspector.from_engine(connection)
    return any(column in col["name"] for col in insp.get_columns(table))

def upgrade():
    logging.basicConfig(level=logging.INFO)
    connection = op.get_bind()

    permission_enum = postgresql.ENUM(
        "PRIVATE", "GROUP", "PUBLIC", name="readwrite_permission"
    )
    try:
        permission_enum.create(connection)
    except Exception as e:
        logging.info(f"Enum already exists: {e}")

    if not _table_has_column(
        connection, "annotation_table_metadata", "write_permission"
    ):
        op.add_column(
            "annotation_table_metadata",
            sa.Column(
                "write_permission",
                postgresql.ENUM(
                    "PRIVATE", "GROUP", "PUBLIC", name="readwrite_permission"
                ),
                nullable=True,
            ),
        )
        op.execute("UPDATE annotation_table_metadata SET write_permission = 'PRIVATE'")
        op.alter_column("annotation_table_metadata", "write_permission", nullable=False)

    if not _table_has_column(
        connection, "annotation_table_metadata", "read_permission"
    ):
        op.add_column(
            "annotation_table_metadata",
            sa.Column(
                "read_permission",
                postgresql.ENUM(
                    "PRIVATE", "GROUP", "PUBLIC", name="readwrite_permission"
                ),
                nullable=True,
            ),
        )
        op.execute("UPDATE annotation_table_metadata SET read_permission = 'PUBLIC'")
        op.alter_column("annotation_table_metadata", "read_permission", nullable=False)

    if not _table_has_column(connection, "annotation_table_metadata", "last_modified"):
        op.add_column(
            "annotation_table_metadata",
            sa.Column("last_modified", sa.DateTime(), nullable=True),
        )

        op.execute(
            "UPDATE annotation_table_metadata SET last_modified = current_timestamp"
        )
        op.alter_column("annotation_table_metadata", "last_modified", nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("annotation_table_metadata", "last_modified")
    op.drop_column("annotation_table_metadata", "read_permission")
    op.drop_column("annotation_table_metadata", "write_permission")
    # ### end Alembic commands ###
